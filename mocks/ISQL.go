// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ISQL is an autogenerated mock type for the ISQL type
type ISQL struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, value
func (_m *ISQL) Create(ctx context.Context, value interface{}) error {
	ret := _m.Called(ctx, value)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, conds
func (_m *ISQL) Delete(ctx context.Context, conds ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) error); ok {
		r0 = rf(ctx, conds...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, result, conds
func (_m *ISQL) Find(ctx context.Context, result interface{}, conds ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, result)
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...interface{}) error); ok {
		r0 = rf(ctx, result, conds...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// First provides a mock function with given fields: ctx, result, conds
func (_m *ISQL) First(ctx context.Context, result interface{}, conds ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, result)
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for First")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...interface{}) error); ok {
		r0 = rf(ctx, result, conds...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, column, value
func (_m *ISQL) Update(ctx context.Context, column string, value interface{}) error {
	ret := _m.Called(ctx, column, value)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, column, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewISQL creates a new instance of ISQL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISQL(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISQL {
	mock := &ISQL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
